#!/usr/bin/perl -w
# Copyright (c) 2013 SUSE Linux Products GmbH
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

=head1 worker

worker - openQA worker daemon

=head1 SYNOPSIS

worker [OPTIONS]

=head1 OPTIONS

=over 4

=item B<--host> HOST

specify dispatcher/scheduler host to connect to

=item B<--instance> NR

specify instance number, ie pool directory to use

=item B<--isotovideo> PATH

path to isotovideo script, useful for running from git

=item B<--no-cleanup>

don't clean pool directory after job

=item B<--verbose>

verbose output

=item B<--help, -h>

print help

=back

=head1 DESCRIPTION

lorem ipsum ...

=cut

use strict;
use POSIX qw/:sys_wait_h strftime SIGTERM/;
use Data::Dump;
use JSON;
use URI;
use Fcntl;
use File::Path qw/make_path remove_tree/;
use File::Copy qw(copy move);
use File::Copy::Recursive qw(dirmove);
use FindBin;
#use lib "$FindBin::Bin/../www/cgi-bin/modules"
#use openqa;
my $clientclass;
for my $i (qw/JSON::RPC::Legacy::Client JSON::RPC::Client/) {
	eval "use $i;";
	$clientclass = $i unless $@;
}
die $@ unless $clientclass;

my $max_job_time = 2*60*60; # 2h
my $openqa_base = "/var/lib/openqa";
my $pooldir;
my $isodir = "$openqa_base/factory/iso";
my $hdddir = "$openqa_base/hdd";
my $results_dir = "$openqa_base/testresults";
my $logupload_dir = "$openqa_base/logupload";

my $isotovideo = "/usr/lib/os-autoinst/tools/isotovideo";

my $keep_running = 1;
my $got_sigchld = 0;

my $client_commands = [qw/
	list_jobs
	job_grab
	job_set_scheduled
	job_set_prio
	job_set_done
	job_set_stop
	worker_register
	command_get
	command_dequeue
	/];

use Getopt::Long;
Getopt::Long::Configure("no_ignore_case");

my %options;

sub usage($) {
	my $r = shift;
	eval "use Pod::Usage; pod2usage($r);";
	if ($@) {
		die "cannot display help, install perl(Pod::Usage)\n";
	}
}

GetOptions(
	\%options,
	"no-cleanup",
	"instance=i",
	"isotovideo=s",
	"host=s",
	"verbose|v",
	"help|h",
) or usage(1);

usage(1) unless exists $options{'host'};
usage(0) if ($options{'help'});

my $verbose = $options{'verbose'};

$options{'instance'} ||= 0;

my $uri;
if ($options{host} !~ '/') {
	$uri = URI->new();
	$uri->authority($options{host});
	$uri->scheme('http');
} else {
	$uri = URI->new($options{host});
}
$uri->path('/jsonrpc') unless $uri->path;
$options{host} = $uri->as_string;

$pooldir = $openqa_base.'/pool/'.($options{'instance'}||'manual');

# XXX: this should be sent to the scheduler to be included in the worker's table
$ENV{'QEMUPORT'} = ($options{'instance'})*10 + 20002;
$ENV{'VNC'}      = ($options{'instance'})    + 90;
$ENV{'OPENQA_HOSTNAME'} = $uri->authority;

$isotovideo = $options{'isotovideo'} if $options{'isotovideo'};

sub lockit()
{
	if (! -e $pooldir) {
		make_path($pooldir);
	}
	chdir $pooldir || die "cannot change directory to $pooldir: $!\n";
	open(my $lockfd, '>>', '.locked') or die "cannot open lock file: $!\n";
	unless (fcntl($lockfd, F_SETLK, pack('ssqql', F_WRLCK, 0, 0, 0, $$))) {
		die "$pooldir already locked\n";
	}
	$lockfd->autoflush(1);
	truncate($lockfd, 0);
	print $lockfd "$$\n";
	return $lockfd;
}

sub workit($)
{
	my $job = shift;
	my $iso = $job->{'settings'}->{'ISO'};
	return undef unless $iso;

	# XXX: this should come from the worker table. Only included
	# here for convenience when looking at the pool of
	# debugging.
	for my $i (qw/QEMUPORT VNC OPENQA_HOSTNAME/) {
		$job->{settings}->{$i} = $ENV{$i};
	}

	if (open(my $fh, '>', 'job.json')) {
		print $fh to_json($job, { pretty => 1 });
		close $fh;
	}

	$iso = join('/', $isodir, $iso);
	unless (-e $iso) {
		warn "$iso does not exist!\n";
		return undef;
	}
	$job->{'settings'}->{'ISO'} = $iso;

	my $nd = $job->{'settings'}->{'NUMDISKS'} || 2;
	for my $i (1..$nd) {
		my $hdd = $job->{'settings'}->{'HDD_$i'} || undef;
		if ($hdd) {
			$hdd = join('/', $hdddir, $hdd);
			unless (-e $hdd) {
				warn "$hdd does not exist!\n";
				return undef;
			}
			$job->{'settings'}->{'HDD_$i'} = $hdd;
		}
	}

	my $child = fork();
	die "failed to fork: $!\n" unless defined $child;
	unless ($child) {
		# just to make isotovideo happy
		unlink('env.sh');
		open(my $e, '>', 'env.sh') or die "can't open env.sh: $!\n";
		while (my ($k, $v) = each $job->{'settings'}) {
			print "setting $k=$v\n" if $verbose;
			$ENV{$k} = $v;
			# XXX: this assumes no quoting needed!
			printf $e "%s=\"%s\"\n", $k, $v;
		}
		close $e;
		printf "$$: WORKING %d\n", $job->{'id'};
		exec($isotovideo, $iso);
		die "exec failed: $!\n";
	} else {
		return $child;
	}
}

sub _kill_worker($)
{
	my $worker = shift;
	return unless $worker;
	for (1..3) {
		print "killing $worker\n";
		last unless $got_sigchld || kill(SIGTERM, $worker);
		sleep 2;
	}

	die "worker didn't want to die!\n" unless $got_sigchld;
}

# set job to done if priority is bigger threshold. Otherwise release
# it with worse priority
sub job_release_or_stop($$$)
{
	my ($client, $job, $result) = @_;
	my $retries = 3; while(1) { eval {
		# give up if the prio is too bad
		if ($job->{'priority'} gt 70) {
			printf "stopping job %d\n", $job->{'id'};
			$client->job_set_stop($job->{'id'});
		} else {
			$job->{'priority'}++;
			printf "releasing job %d, prio %d\n", $job->{'id'}, $job->{'priority'};
			# make it less attractive so we don't get it again
			$client->job_set_prio($job->{'id'}, $job->{'priority'});
			$client->job_set_scheduled($job->{'id'});
		}
	}; last unless ($@); warn "$retries: $@"; die "$@" unless $retries--; sleep 5; next; }
}

# check if results.json contains an overal result. If the latter is
# missing the worker probably crashed.
sub results_overall($)
{
	my $fn = shift;
	my $ret;
	local $/;
	open(my $fh, '<', $fn) or return 0;
	my $json = decode_json(<$fh>);
	$ret = $json->{'overall'} if $json && $json->{'overall'};
	close($fh);
	return $ret;
}

sub clean_pool($)
{
	return if $options{'no-cleanup'};
	my $job = shift;
	my $name = $job->{'settings'}->{'NAME'};
	remove_tree(
		"$logupload_dir/$name",
		"$pooldir/testresults",
		"$pooldir/video",
		"$pooldir/movie",
		"$pooldir/qemuscreenshot",
		"$pooldir/raid"
	);
}

sub backup_testresults($)
{
	my $testresults = shift;
	for (my $i = 0; $i < 100; $i++) {
		if (rename($testresults, $testresults.".$i")) {
			return;
		}
	}
	remove_tree($testresults);
}


sub main()
{
	my $lockfd = lockit();
	my $client = new $clientclass;

	printf "connecting to %s ...\n", $options{'host'} if $verbose;
	$client->prepare($options{'host'}, $client_commands) or die "xxx $!\n";


	my $workerid = $client->worker_register('localhost', $options{'instance'}, 'qemu');
	$ENV{'WORKERID'} = $workerid;

	my $job;
	my $worker;
	my $worker_start_time;
	my $testresults;
	my $aborted;
	my $retries;

	$SIG{__DIE__} = sub { return if $^S; _kill_worker($worker); exit(1); };

	while($keep_running) {
		my $cmds; # [[id, command], ... ]
		$retries = 3; while(1) { eval {
			$cmds = $client->command_get($workerid);
		}; last unless ($@); warn "$retries: $@"; die "$@" unless $retries--; sleep 5; next; }
		for my $cmd (@{$cmds||[]}) {
			if ($cmd->[1] eq 'quit') {
				$keep_running = 0;
				if ($worker) {
					_kill_worker($worker);
					$retries = 3; while(1) { eval {
						$client->job_set_scheduled($job->{'id'});
					}; last unless ($@); warn "$retries: $@"; die "$@" unless $retries--; sleep 5; next; }
					$aborted = 'quit';
				}
			} elsif ($cmd->[1] eq 'abort') {
				if ($worker) {
					_kill_worker($worker);
					$retries = 3; while(1) { eval {
						$client->job_set_scheduled($job->{'id'});
					}; last unless ($@); warn "$retries: $@"; die "$@" unless $retries--; sleep 5; next; }
					$aborted = 'abort';
				}
			} elsif ($cmd->[1] eq 'stop') {
				if ($worker) {
					_kill_worker($worker);
					$aborted = 'stop';
				}
			} elsif ($cmd->[1] eq 'stop_waitforneedle') {
				if ($worker) {
					if (open(my $f, '>', "$pooldir/stop_waitforneedle")) {
						close $f;
						print "waitforneedle will be stopped";
					} else {
						warn "can't stop waitforneedle: $!";
					}
				}
			} elsif ($cmd->[1] eq 'reload_needles_and_retry') {
				if ($worker) {
					if (open(my $f, '>', "$pooldir/reload_needles_and_retry")) {
						close $f;
						print "needles will be reloaded";
					} else {
						warn "can't reload needles: $!";
					}
				}
			} elsif ($cmd->[1] eq 'enable_interactive_mode') {
				if ($worker) {
					if (open(my $f, '>', "$pooldir/interactive_mode")) {
						close $f;
						print "interactive mode enabled\n";
					} else {
						warn "can't enable interactive mode: $!";
					}
				}
			} elsif ($cmd->[1] eq 'disable_interactive_mode') {
				if ($worker) {
					unlink("$pooldir/interactive_mode");
					print "interactive mode disabled\n";
				}
			} elsif ($cmd->[1] eq 'continue_waitforneedle') {
				if ($worker) {
					unlink("$pooldir/stop_waitforneedle");
					print "continuing waitforneedle";
				}
			} else {
				print STDERR "got unknown command $cmd->[1]\n";
			}
			$retries = 3; while(1) { eval {
				$client->command_dequeue($workerid, $cmd->[0]);
			}; last unless ($@); warn "$retries: $@"; die "$@" unless $retries--; sleep 5; next; }
		}

		# abort job if it takes too long
		if ($job && $worker_start_time && time-$worker_start_time > $max_job_time && !$aborted) {
			warn sprintf("max job time exceeded, aborting %s ...\n", $job->{'settings'}->{'NAME'});
			_kill_worker($worker);
			job_release_or_stop($client, $job, "time exceeded");
			$aborted = 'timeout';
		}

		if ($keep_running && !$job) {
			print "waiting for job ...\n" if $verbose;
			$retries = 3; while(1) { eval {
				$job = $client->job_grab($workerid);
			}; last unless ($@); warn "$retries: $@"; die "$@" unless $retries--; sleep 5; next; }
			unless ($job) {
				sleep 5;
				next;
			}
			printf "got job %d\n", $job->{'id'};
			my $name = $job->{'settings'}->{'NAME'};
			$testresults = join('/', $results_dir, $name);
			if (-l "$testresults") {
				unlink($testresults);
			} elsif (-e $testresults) {
				backup_testresults($testresults);
			}
			symlink(join('/', $pooldir, 'testresults', $name), $testresults) or warn "symlink $testresults: $!\n";
			$worker = workit($job);
			unless ($worker) {
				warn "launching worker failed, releasing job\n";
				job_release_or_stop($client, $job, "worker died");
				$job = undef;
			}
			$worker_start_time = time;
			$aborted = undef;
			if ($job && open(my $log, '>>', "$results_dir/runlog.txt")) {
				if (fcntl($log, F_SETLKW, pack('ssqql', F_WRLCK, 0, 0, 0, $$))) {
					my @s = map { sprintf("%s=%s", $_, $job->{'settings'}->{$_}) } grep { $_ ne 'ISO' && $_ ne 'NAME' } keys %{$job->{'settings'}};
					printf $log "%s started to create %s %s\n",
						strftime("%F %T", gmtime), $name, join(' ', @s);
				}
				close($log);
			}
		}

		# we also enter here if the worker was killed intentionally
		if ($worker && $got_sigchld) {
			$got_sigchld = 0;
			my $pid = waitpid($worker, WNOHANG);
			die "huh? wrong child?\n" unless $pid == $worker;
			my $result = "ok";
			if ($?) {
				warn "child $pid died with exit status $?\n";
				$aborted = "died" unless $aborted;
			}

			$result = $aborted if $aborted;

			unlink($testresults); # can't move directory atomically to replace symlink
			my $name = $job->{'settings'}->{'NAME'};
			if (open(my $log, '>>', "$results_dir/runlog.txt")) {
				if (fcntl($log, F_SETLKW, pack('ssqql', F_WRLCK, 0, 0, 0, $$))) {
					printf $log "%s finished to create %s: %s\n",
						strftime("%F %T", gmtime),
						$name, $result;
				}
				close($log);
			}

			if (!$aborted || $aborted eq 'stop' || $aborted eq 'timeout') {
				# collect uploaded logs
				my @uploaded_logfiles = <$logupload_dir/$name/*>;
				mkdir("$pooldir/testresults/$name/ulogs/");
				if(@uploaded_logfiles) {
					for my $uploaded_logfile (@uploaded_logfiles) {
						next unless -f $uploaded_logfile;
						unless(copy($uploaded_logfile, "$pooldir/testresults/$name/ulogs/")) {
							warn "can't copy ulog: $uploaded_logfile -> $pooldir/testresults/$name/ulogs/\n";
						}
					}
				}
				if(-e "$logupload_dir/$name/") {
					remove_tree("$logupload_dir/$name/"); # cleanup
				}

				unless (dirmove("$pooldir/testresults/$name", $testresults)) {
					warn "can't move test results $pooldir/testresults/$name -> $testresults: $!\n";
					$keep_running = 0;
				}
				unless (move("$pooldir/autoinst-log.txt", $testresults.'/autoinst-log.txt')) {
					warn "can't move log: $!\n";
					$keep_running = 0;
				}

				if (open(my $log, '>>', "$testresults/autoinst-log.txt")) {
					print $log "+++ worker notes +++\n";
					printf $log "time: %s\n", strftime("%F %T", gmtime);
					print $log "overall result: $result\n";
					close $log;
				}

				# if there's no results.json start.pl probably died early, e.g. due to configuration
				# problem. Release the job so another worker may grab it.
				my $overall = results_overall("$testresults/results.json");
				$result = $overall if !$aborted && $overall;
				# XXX: use job_set_stop in case of stop?
				if (($aborted||'') eq 'stop' || $overall) {
					$retries = 3; while(1) { eval {
						printf "setting job %d to $result\n", $job->{'id'};
						$client->job_set_done($job->{'id'}, $result);
					}; last unless ($@); warn "$retries: $@"; die "$@" unless $retries--; sleep 5; next; }
				} else {
					job_release_or_stop($client, $job, $result);
				}
			} else {
			    job_release_or_stop($client, $job, $result);
			}
			warn sprintf("cleaning up %s...\n", $job->{'settings'}->{'NAME'});
			clean_pool($job);
			$job = undef;
			$worker = undef;
			$worker_start_time = undef;
		}

		print "waiting for some action ...\n" if $verbose;
		sleep 2 if $keep_running;
	}
	if ($job) {
		_kill_worker($worker);
		unlink($testresults);
		$retries = 3; while(1) { eval {
			$client->job_set_scheduled($job->{'id'});
		}; last unless ($@); warn "$retries: $@"; die "$@" unless $retries--; sleep 5; next; }

		clean_pool($job);
	}
}

sub catch_exit
{
	$keep_running = 0;
}

sub catch_sigchld
{
	print "worker got SIGCHLD\n" if $verbose;
	$got_sigchld = 1;
}

$SIG{HUP} = \*catch_exit;
$SIG{TERM} = \*catch_exit;
$SIG{INT} = \*catch_exit;
$SIG{CHLD} = \*catch_sigchld;

main();

print "quit\n";
exit 0;
